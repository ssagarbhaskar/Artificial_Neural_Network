# -*- coding: utf-8 -*-
"""ANN_Breast_cancer

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15_HTc6VPpBlsFkvKAJXCWDpyZXZzFJ3e
"""

# -----------------ANN-breast cancer------------

# Importing the libraries

import numpy as np
import pandas as pd
import tensorflow as tf

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', -1)

# Data Pre-processing or data cleaning as soon as the data is imported

# Importing the data

dataset = pd.read_csv('breast-cancer-wisconsin.data', na_values='?')

# To remove all the null indices

null_inds = list(np.where(dataset.isnull())[0])     # Taken all the nan indices

dataset = dataset.drop(null_inds)           # removed all nan indices

print(dataset.info())           # shows no null elements

# To convert outcome to 0 and 1 from 2 and 4

outcome = {2: 0, 4: 1}

dataset['class'] = dataset['class'].map(outcome)

# Features and dependent var

x = dataset.iloc[:, 1:-1].values
y = dataset.iloc[:, -1].values

# we don't have any categorical data
# We don't have any need to perform one hot encoding
# No missing values as  we removed all

# Splitting the data to train and test set

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

# Feature scaling as it is mandatory in ANN

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

# So after the data is cleaned to a way that it can be used by a model
# We need to start building a model that is NN model

# Building the ANN

    # Initialising the ANN

ann = tf.keras.models.Sequential()

    # Adding the input layer and the first hidden layer

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))  # Units is the number of neurons we need in that layer

    # Adding the second hidden layer

ann.add(tf.keras.layers.Dense(units=6, activation='relu'))

    # Adding the output layer

ann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))


# Training the ANN

# Compiling the ANN

ann.compile(optimizer='adam',
            loss='binary_crossentropy',
            metrics=['accuracy'])

# Training the ANN

ann.fit(x_train, y_train, batch_size=32, epochs=50)

# Predicting the test set results

y_pred = ann.predict(x_test)

y_pred = (y_pred > 0.5)
print(y_pred)

# Concatenation

concat = np.concatenate((y_pred.reshape(len(y_pred), 1),
                        y_test.reshape(len(y_test), 1)), 1)

print(concat)

# Making the confusion matrix

from sklearn.metrics import confusion_matrix, accuracy_score

cm = confusion_matrix(y_test, y_pred)
print(cm)

print(accuracy_score(y_test, y_pred))